"use strict";(self.webpackChunkangular_17_test=self.webpackChunkangular_17_test||[]).push([[9021],{29021:(M,m,r)=>{r.r(m),r.d(m,{default:()=>h});var l=r(15861),E=(r(2189),r(12786)),i=r(8868),P=r(3749),a=r(98797),d=r(1408),c=r(89350),f=r(57618),u=r(89479),D=r(58340),S=r(41068),p=r(74155),_=r(26894),v=r(85039);class h{convertVectorFieldData(t){const e=i.Z.fromJSON(t.pixelBlock),o=(0,u.KC)(e,t.type);return Promise.resolve(null!=o?o.toJSON():null)}computeStatisticsHistograms(t){const e=i.Z.fromJSON(t.pixelBlock),o=(0,f.js)(e);return Promise.resolve(o)}decode(t){return(0,l.Z)(function*(){const e=yield(0,P.J)(t.data,t.options);return e&&e.toJSON()})()}symbolize(t){t.pixelBlock=i.Z.fromJSON(t.pixelBlock),t.extent=t.extent?_.Z.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(null!=e?e.toJSON():null)}updateSymbolizer(t){var e=this;return(0,l.Z)(function*(){e.symbolizer=S.Z.fromJSON(t.symbolizerJSON),t.histograms&&"rasterStretch"===e.symbolizer?.rendererJSON.type&&(e.symbolizer.rendererJSON.histograms=t.histograms)})()}updateRasterFunction(t){var e=this;return(0,l.Z)(function*(){e.rasterFunction=(0,d.Ue)(t.rasterFunctionJSON)})()}process(t){var e=this;return(0,l.Z)(function*(){const o=e.rasterFunction.process({extent:_.Z.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(s=>null!=s?i.Z.fromJSON(s):null),primaryPixelSizes:t.primaryPixelSizes?.map(s=>null!=s?v.Z.fromJSON(s):null),primaryRasterIds:t.primaryRasterIds});return null!=o?o.toJSON():null})()}stretch(t){const e=this.symbolizer.simpleStretch(i.Z.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e?.toJSON())}estimateStatisticsHistograms(t){const e=(0,f.Hv)(i.Z.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=(0,a.Vl)(i.Z.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((o,s)=>{e.set(s,o?.toJSON())}),Promise.resolve(e)}mosaicAndTransform(t){return(0,l.Z)(function*(){const e=t.srcPixelBlocks.map(O=>O?new i.Z(O):null),o=(0,a.us)(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let s,n=o;return t.coefs&&(n=(0,a.Uk)(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(s=(0,a.Qh)(t.destDimension,t.gcsGrid),n=(0,u.xQ)(n,t.isUV?"vector-uv":"vector-magdir",s)),{pixelBlock:n?.toJSON(),localNorthDirections:s}})()}createFlowMesh(t,e){return(0,l.Z)(function*(){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:s,indexData:n}=yield(0,p.GE)(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:n.buffer},transferList:[s.buffer,n.buffer]}})()}getProjectionOffsetGrid(t){return(0,l.Z)(function*(){const e=_.Z.fromJSON(t.projectedExtent),o=_.Z.fromJSON(t.srcBufferExtent);let s=null;t.datumTransformationSteps&&(s=new E.Z({steps:t.datumTransformationSteps})),(t.includeGCSGrid||(0,c.Mk)(e.spatialReference,o.spatialReference,s))&&(yield(0,c.zD)());const n=t.rasterTransform?(0,D.c)(t.rasterTransform):null;return(0,c.Qp)({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:s,rasterTransform:n})})()}}}}]);