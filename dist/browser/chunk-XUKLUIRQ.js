import{b as y}from"./chunk-UEH4FZMX.js";import{i as S,j as b}from"./chunk-Z7J4BCLI.js";import{l as m,n as g,o as f}from"./chunk-TKTKGUCU.js";import{a as T}from"./chunk-WKOJXXCZ.js";import{a as R}from"./chunk-MNLP6AEE.js";import{b as l}from"./chunk-YEFC7M4L.js";import{c as w,g as B,h as u,i as k,k as v}from"./chunk-7UQPY7PH.js";import{l as x,n as p,z as _}from"./chunk-PT7S6WNL.js";import{g as d}from"./chunk-ESDYQQXO.js";var n=class{constructor(t,e,i){this.pixelBlock=t,this.extent=e,this.originalPixelBlock=i}get width(){return this.pixelBlock!=null?this.pixelBlock.width:0}get height(){return this.pixelBlock!=null?this.pixelBlock.height:0}render(t){let e=this.pixelBlock;if(e==null)return;let i=this.filter({extent:this.extent,pixelBlock:this.originalPixelBlock??e});if(i.pixelBlock==null)return;i.pixelBlock.maskIsAlpha&&(i.pixelBlock.premultiplyAlpha=!0);let h=i.pixelBlock.getAsRGBA(),r=t.createImageData(i.pixelBlock.width,i.pixelBlock.height);r.data.set(h),t.putImageData(r,0,0)}getRenderedRasterPixels(){let t=this.filter({extent:this.extent,pixelBlock:this.pixelBlock});return t.pixelBlock==null?null:(t.pixelBlock.maskIsAlpha&&(t.pixelBlock.premultiplyAlpha=!0),{width:t.pixelBlock.width,height:t.pixelBlock.height,renderedRasterPixels:new Uint8Array(t.pixelBlock.getAsRGBA().buffer)})}};function M(s){return s&&"render"in s}function W(s){let t=document.createElement("canvas");return t.width=s.width,t.height=s.height,s.render(t.getContext("2d")),t}function H(s){return M(s)?s instanceof n?s.getRenderedRasterPixels()?.renderedRasterPixels:W(s):s}var A=class extends y{constructor(t=null,e=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=e,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),this._uploadStatus!=null&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return this._height!==void 0?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){t==null&&this._source==null||(this._source=t,this.invalidateTexture(),this.requestRender())}get width(){return this._width!==void 0?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}setSourceAsync(t,e){return d(this,null,function*(){this._uploadStatus!=null&&this._uploadStatus.controller.abort();let i=new AbortController,h=_();return p(e,()=>i.abort()),p(i,r=>h.reject(r)),this._uploadStatus={controller:i,resolver:h},this.source=t,h.promise})}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}updateTransitionProperties(t,e){t>=64&&(this.fadeTransitionEnabled=!1,this.inFadeTransition=!1),super.updateTransitionProperties(t,e)}setTransform(t){let e=w(this.transforms.dvs),[i,h]=t.toScreenNoRotation([0,0],[this.x,this.y]),r=this.resolution/this.pixelRatio/t.resolution,o=r*this.width,a=r*this.height,c=Math.PI*this.rotation/180;u(e,e,l(i,h)),u(e,e,l(o/2,a/2)),k(e,e,-c),u(e,e,l(-o/2,-a/2)),v(e,e,l(o,a)),B(this.transforms.dvs,t.displayViewMat3,e)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,e){this._texture&&t.bindTexture(this._texture,e)}updateTexture(i){return d(this,arguments,function*({context:t,painter:e}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(t)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);let h=H(this.source);try{if(this._uploadStatus!=null){let{controller:r,resolver:o}=this._uploadStatus,a={signal:r.signal},{width:c,height:I}=this,P=this._texture;yield e.textureUploadManager.enqueueTextureUpdate({data:h,texture:P,width:c,height:I},a),o.resolve(),this._uploadStatus=null}else this._texture.setData(h);this.ready()}catch(r){x(r)}})}onDetach(){this.destroy()}_createTransforms(){return{dvs:T()}}_createTexture(t){let e=this.immutable&&t.type===R.WEBGL2,i=new S;return i.internalFormat=e?f.RGBA8:g.RGBA,i.wrapMode=m.CLAMP_TO_EDGE,i.isImmutable=e,i.width=this._sourceWidth,i.height=this._sourceHeight,new b(t,i)}};export{n as a,M as b,W as c,A as d};
